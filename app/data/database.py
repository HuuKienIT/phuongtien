import os
import subprocess
import psycopg2
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from ..config import get_settings

# L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ settings
settings = get_settings()
print(f"üîó K·∫øt n·ªëi database: {settings.DATABASE_URL}")

# S·ª≠ d·ª•ng create_async_engine thay v√¨ create_engine
engine = create_async_engine(settings.DATABASE_URL, echo=True)

# C·∫•u h√¨nh session b·∫•t ƒë·ªìng b·ªô
AsyncSessionLocal = async_sessionmaker(bind=engine, autoflush=True, expire_on_commit=False, class_=AsyncSession)

async def create_database_if_not_exists():
    """T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i."""
    try:
        print(f"üì° Ki·ªÉm tra database {settings.DB_NAME}...")

        # K·∫øt n·ªëi v·ªõi PostgreSQL m√† kh√¥ng c·∫ßn ch·ªâ ƒë·ªãnh database c·ª• th·ªÉ
        conn = psycopg2.connect(
            dbname="postgres",
            user=settings.DB_USER,
            password=settings.DB_PASSWORD,
            host=settings.DB_HOST,
            port=settings.DB_PORT
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Ki·ªÉm tra database c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (settings.DB_NAME,))
        exists = cursor.fetchone()

        if not exists:
            cursor.execute(f"CREATE DATABASE {settings.DB_NAME}")
            print(f"‚úÖ C∆° s·ªü d·ªØ li·ªáu '{settings.DB_NAME}' ƒë√£ ƒë∆∞·ª£c t·∫°o.")
        else:
            print(f"‚úÖ C∆° s·ªü d·ªØ li·ªáu '{settings.DB_NAME}' ƒë√£ t·ªìn t·∫°i.")

        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra/t·∫°o database: {e}")

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn Alembic
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ALEMBIC_DIR = os.path.abspath(os.path.join(BASE_DIR, "..", ".."))

async def init_db():
    """Ch·∫°y Alembic migrations khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng."""
    try:
        await create_database_if_not_exists()

        # L·∫•y th∆∞ m·ª•c g·ªëc d·ª± √°n t·ª´ v·ªã tr√≠ c·ªßa script hi·ªán t·∫°i
        BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
        ALEMBIC_INI_PATH = os.path.join(BASE_DIR, "alembic.ini")

        print(f"üìÇ BASE_DIR: {BASE_DIR}")
        print(f"üìÇ ALEMBIC_DIR: {ALEMBIC_DIR}")
        print(f"üìÇ ALEMBIC_INI_PATH: {ALEMBIC_INI_PATH}")

        # Ki·ªÉm tra t·ªáp alembic.ini c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(ALEMBIC_INI_PATH):
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y alembic.ini t·∫°i {ALEMBIC_INI_PATH}, b·ªè qua migrations.")
        else:
            print("üîÑ ƒêang ch·∫°y Alembic migrations...")
            subprocess.run(
                ["alembic", "-c", "alembic.ini", "upgrade", "head"],
                check=True,
                cwd=ALEMBIC_DIR
            )
        print("‚úÖ Alembic migrations ƒë√£ ho√†n t·∫•t.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y migrations: {e}")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën khi ch·∫°y migrations: {e}")

# Dependency ƒë·ªÉ l·∫•y session b·∫•t ƒë·ªìng b·ªô
async def get_db():
    async with AsyncSessionLocal() as db:
        yield db
